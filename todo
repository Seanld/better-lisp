[x] Design basic syntax for language (keep it simple, similar to Common LISP).

[x] Write a simple tokenizer via RegEx.
    [x] Sort the generated tokens in chronological order to make building the AST easier.

[] Create a module that handles the creation of ASTs via generated tokens using `tokenizer.py`.
    [x] Match groups of tokens to larger expressions so that ASTs are more categorized and useful.
        [x] Single (one) token match checks.
        [x] Multiple (many) token match checks.
    [] Match multiple groups of expressions for complex LISP programs.
    [] Use generated expressions to generate basic AST structure.

[] Using the generated AST, scan through nodes and generate code for `https://github.com/Seanld/vm`.